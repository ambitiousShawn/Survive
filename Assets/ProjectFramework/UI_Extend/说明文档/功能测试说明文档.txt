
===================================================================================
注意：弹出UI面板统一调用PanelManager.Instance.ShowPanel<面板类名>("面板类名"); 即可
===================================================================================

===================对话系统测试===================
对话系统测试：
模块测试：运行游戏，按B弹出对话框，空格进入下一句。
API调用说明：
在Resources / SO / Dialogue_SO 文件中编辑好对话内容后，点击序列化 (详情见对话系统使用说明) 。
直接在需要弹出对话的逻辑语块中 调用 ！！！DialogueManager.Instance.ShowDialogue(int pos); ！！！
传入的Pos即为 在SO文件中的pos值。


===================Buff系统测试===================
Buff系统测试：
模块测试：运行游戏，按N弹出主UI界面，Q / W / E 分别添加三类Buff。
API调用说明：
在Resources / SO / Buff_SO 文件中编辑好Buff内容后，点击序列化 (与对话系统操作相同) 。
直接在需要添加Buff的逻辑语块中 调用 ！！！BuffManager.Instance.AddBuff(int id, UnityAction callback); ！！！
- 1. 传入的id即为 在SO文件中的id值。
- 2. 传入的callback即为 Buff的具体效果。(测试效果为打印)


===================背包系统测试===================
背包系统测试：
模块测试：运行游戏，按N弹出主UI界面，R / T / Y 分别添加三类物品，按 U 消耗1个蓝水晶。
API调用说明：
在Resources / SO / Inventory_SO 文件中编辑好物品内容后，点击序列化 (与对话系统操作相同) 。
直接在需要添加物品的逻辑语块中 调用 ！！！InventoryManager.Instance.AddItem(int id, int num); ！！！
消耗物品同理，调用 ！！！InventoryManager.Instance.ConsumeItem(string name, int num);！！！
- 1. 添加传入的id即为 物品在SO文件中的id值。
- 2. 添加 / 消耗 传入的num即为 要添加物品的个数。(测试效果为打印)
- 3. 消耗传入的name即为物品的Name字段。

背包与仓库交互模块测试：
模块测试：先按 N 弹出主UI界面， R / T / Y分别添加三类物品，再按A弹出 仓库面板。随后可通过点击物品的操作查看信息或移动物体。
API调用说明：
在游戏进程中 合适的逻辑块 调用 ！！！PanelManager.Instance.ShowPanel<UGUI_WareHousePanel>("UGUI_WareHousePanel");！！！弹出仓库面板即可。


===================提示系统测试===================
提示系统测试：
模块测试：运行游戏，直接点击右上角 “Notes” 显示随机提示面板，按 ESC 退出面板。
API调用说明：
在Resources / SO / Tip_SO 文件中编辑好提示内容后，点击序列化 (与对话系统操作相同) 即可。

===================被动技能系统测试===================
被动技能系统测试：
模块测试：运行游戏，按F弹出主技能加点界面，G刷新列表即可查看到各个技能，点击按钮即可加点。
API调用说明：
在Resources / SO / Skill_SO 文件中编辑好技能内容后，点击序列化 (与对话系统操作相同) 。
直接对应弹出技能面板逻辑块中添加	ShowPanel<>(); 即可。

===================轮盘抽卡系统测试===================
轮盘抽卡系统测试：
模块测试：运行游戏，按I弹出轮盘抽卡界面，O开始旋转轮盘即可看到效果。

===================剧情流程系统测试===================
剧情流程系统测试：
模块测试：运行游戏，按 H 弹出输出当前剧情位置。
API调用说明：
在Resources / SO / Card_SO 编辑好所有卡牌内容，点击序列化。
直接到对应逻辑块中调用 CardProcessManager.Instance.JumpToTarget(int num);即可
num:为回复的序号，如果选择第一条回复则填入0。以此类推。